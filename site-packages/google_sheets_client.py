from __future__ import print_function
import httplib2
import os

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage

SCOPES = 'https://www.googleapis.com/auth/spreadsheets'
CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'Hotel Log'

class google_sheets_client:
    def __init__(self, credential_file):
        self.credentials = self.get_credentials(credential_file)
        self.get_sheets_service()

    def get_credentials(self, credential_file):
        """Gets valid user credentials from storage.

        If nothing has been stored, or if the stored credentials are invalid,
        the OAuth2 flow is completed to obtain the new credentials.

        Returns:
            Credentials, the obtained credential.
        """
        credential_dir = os.path.join(os.getcwd(), '.credentials')
        if not os.path.exists(credential_dir):
            os.makedirs(credential_dir)
        credential_path = os.path.join(credential_dir, credential_file)

        store = Storage(credential_path)
        credentials = store.get()
        if not credentials or credentials.invalid:
            flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
            flow.user_agent = APPLICATION_NAME
            credentials = tools.run_flow(flow, store, flags)
        return credentials

    def get_sheets_service(self):
        http = self.credentials.authorize(httplib2.Http())
        discoveryUrl = ('https://sheets.googleapis.com/$discovery/rest?'
                        'version=v4')
        self.service = discovery.build('sheets', 'v4', http=http,
                                  discoveryServiceUrl=discoveryUrl)

    def does_sheet_exist(self, spreadsheet_id, sheet_name):
        response = self.service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
        sheets = response.get('sheets', [])

        result = False

        for sheet in sheets:
            if sheet['properties']['title'] == sheet_name:
                result = True
                break

        return result

    def create_sheet(self, spreadsheet_id, sheet_name):
        requests = {'requests': [{ 'addSheet': {'properties': {'title': sheet_name, 'sheetType': 'GRID' } } }]}

        self.service.spreadsheets().batchUpdate(spreadsheetId=spreadsheet_id, body=requests).execute()

    def get_sheet_id(self, spreadsheet_id, sheet_name):
        response = self.service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
        sheets = response.get('sheets', [])
        
        for sheet in sheets:
            if sheet['properties']['title'] == sheet_name:
                sheet_id = sheet['properties']['sheetId']
                
        return sheet_id

    def format_spreadsheet(self, spreadsheet_id, sheet_id):
        requests = { 	"requests": [{	"repeatCell": {	"range": {	"sheetId": sheet_id,	"startRowIndex": 0,	"endRowIndex": 1,	"startColumnIndex": 0,	"endColumnIndex": 5	},	"cell": {	"userEnteredFormat": {	"backgroundColor": {	"red": 0.0,	"green": 0.0,	"blue": 0.0	},	"horizontalAlignment": "CENTER",	"textFormat": {	"foregroundColor": {	"red": 1.0,	"green": 1.0,	"blue": 1.0	},	"fontSize": 12,	"bold": True	}	}	},	"fields": "userEnteredFormat(backgroundColor,textFormat,horizontalAlignment)"	}	}, {	"updateSheetProperties": {	"properties": {	"sheetId": sheet_id,	"gridProperties": {	"frozenRowCount": 1	}	},	"fields": "gridProperties.frozenRowCount"	}	}, {	"repeatCell": {	"range": {	"sheetId": sheet_id,	"startRowIndex": 0,	"endRowIndex": 1000000,	"startColumnIndex": 0,	"endColumnIndex": 1	},	"cell": {	"userEnteredFormat": {	"numberFormat": {	"type": "DATE_TIME"	}	}	},	"fields": "userEnteredFormat.numberFormat"	}	}, {	"repeatCell": {	"range": {	"sheetId": sheet_id,	"startRowIndex": 0,	"endRowIndex": 1000000,	"startColumnIndex": 3,	"endColumnIndex": 4	},	"cell": {	"userEnteredFormat": {	"numberFormat": {	"type": "CURRENCY",	"pattern": "R#,##0.00"	}	}	},	"fields": "userEnteredFormat.numberFormat"	}	} 	] }

        self.service.spreadsheets().batchUpdate(spreadsheetId=spreadsheet_id, body=requests).execute()

    def add_new_row(self, spreadsheet_id, range_name, update_body):
        self.service.spreadsheets().values().append(spreadsheetId=spreadsheet_id, range=range_name, valueInputOption='USER_ENTERED', body=update_body).execute()
